# YAML anchors
shared:

  # Task : sync and merge with rsync 2 rep. Used to merge stack and config
  - &merge-stack-and-config
    platform: linux
    image_resource:
      type: docker-image
      source:
        repository: cycloid/cycloid-toolkit
        tag: v2.7
    run:
      path: /usr/bin/merge-stack-and-config
    outputs:
    - name: merged-stack
      path: "merged-stack"

  # Task : connect on the bastion server and run ansible from it
  - &run-ansible
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: cycloid/cycloid-toolkit
          tag: v2.7
      run:
        path: /usr/bin/ansible-runner
      caches:
        - path: ansible-playbook/roles
      inputs:
      - name: merged-stack
        path: ansible-playbook



groups:
  - name: all
    jobs:
    - ansible-run
    - terraform-plan
    - terraform-apply
  - name: destroy
    jobs:
    - terraform-destroy

resource_types:
  - name: terraform
    type: docker-image
    source:
      repository: ljfranklin/terraform-resource
      tag: '0.11.13'

  - name: cycloid-events
    type: docker-image
    source:
      repository: cycloid/cycloid-events-resource

resources:

  - name: git_stack
    type: git
    check_every: 2m
    source:
      uri: ((git_repository))
      branch: stacks
      private_key: ((git_ssh_key))
      paths:
        - stack-ec2/terraform/*

  - name: git_stack_ansible
    type: git
    check_every: 2m
    source:
      uri: ((git_repository))
      branch: stacks
      private_key: ((git_ssh_key))
      paths:
        - stack-ec2/ansible/*

  - name: git_config
    type: git
    check_every: 2m
    source:
      uri: ((git_repository))
      branch: ((config_git_branch))
      private_key: ((git_ssh_key))

  - name: tfstate
    type: terraform
    source:
      env_name: ((env))
      backend_type: s3
      backend_config:
        bucket: ((terraform_storage_bucket_name))
        key: ((terraform_storage_bucket_path))/terraform.tfstate
        region: ((aws_default_region))
        access_key: ((aws_access_key))
        secret_key: ((aws_secret_key))
      vars:
        access_key: ((aws_access_key))
        secret_key: ((aws_secret_key))
        aws_region: ((aws_default_region))
        env: ((env))
        project: ((project))
        customer: ((customer))
      env:
        AWS_ACCESS_KEY_ID: ((aws_access_key))
        AWS_SECRET_ACCESS_KEY: ((aws_secret_key))
        AWS_DEFAULT_REGION: ((aws_default_region))

  - name: cycloid-events
    type: cycloid-events
    source:
      api_login: ((api_login))
      api_password: ((api_password))
      api_url: ((api_url))
      icon: fa-code-branch
      organization: ((customer))
      severity: info
      type: Custom
      tags:
        - key: project
          value: ((project))
        - key: env
          value: ((env))
        - key: customer
          value: ((customer))

jobs:

  - name: terraform-plan
    max_in_flight: 1
    build_logs_to_retain: 10
    plan:
    - do:
      - get: git_stack
        trigger: true
      - get: git_config
        trigger: true
      - task: merge-stack-and-config
        config:
          <<: *merge-stack-and-config
          inputs:
          - name: git_config
            path: "config"
          - name: git_stack
            path: "stack"
        params:
          CONFIG_PATH: ((project))/terraform/((env))
          STACK_PATH: stack-ec2/terraform

      - put: tfstate
        params:
          env_name: ((env))
          plan_only: true
          terraform_source: merged-stack/

  - name: terraform-apply
    max_in_flight: 1
    build_logs_to_retain: 10
    plan:
    - do:
      - get: git_stack
        passed: [terraform-plan]
      - get: tfstate
        passed: [terraform-plan]
      - get: git_config
        passed: [terraform-plan]
      - task: merge-stack-and-config
        config:
          <<: *merge-stack-and-config
          inputs:
          - name: git_config
            path: "config"
          - name: git_stack
            path: "stack"
        params:
          CONFIG_PATH: ((project))/terraform/((env))
          STACK_PATH: stack-ec2/terraform

      - put: tfstate
        params:
          env_name: ((env))
          run_plan: true
          terraform_source: merged-stack/

  - name: ansible-run
    max_in_flight: 1
    build_logs_to_retain: 10
    plan:
    - do:
      - get: git_stack_ansible
        trigger: true
      - get: tfstate
        passed: [terraform-apply]
        trigger: false
      - get: git_config
        passed: [terraform-apply]
        trigger: false

      - task: merge-stack-and-config
        config:
          <<: *merge-stack-and-config
          inputs:
          - name: git_config
            path: "config"
          - name: git_stack_ansible
            path: "stack"
          - name: tfstate
            path: "terraform"
        params:
          CONFIG_PATH: ((project))/ansible
          STACK_PATH: stack-ec2/ansible

      - task: run-ansible
        <<: *run-ansible
        params:
          #BASTION_URL: ((bastion_url))
          #ANSIBLE_VAULT_PASSWORD: ((ansible_vault_password))
          SSH_PRIVATE_KEY: ((git_ssh_key))
          AWS_DEFAULT_REGION: ((aws_default_region))
          AWS_ACCESS_KEY_ID: ((aws_access_key))
          AWS_SECRET_ACCESS_KEY: ((aws_secret_key))
          ANSIBLE_PLAYBOOK_PATH: ansible-playbook
          ANSIBLE_PLAYBOOK_NAME: ec2.yml
          ANSIBLE_FORCE_GALAXY: false
          EC2_VPC_DESTINATION_VARIABLE: ip_address
          EXTRA_ANSIBLE_VARS:
            customer: ((customer))
            project: ((project))
            env: ((env))
          #TAGS:

      on_failure:
        do:
        - put: cycloid-events
          params:
            severity: crit
            message: Oops
            title: Ansible of ((project)) owl have failed on ((env)) environment
      on_success:
        do:
        - put: cycloid-events
          params:
            message: Congrats !
            title: Successful ansible of ((project)) owl on ((env)) environment


  - name: terraform-destroy
    max_in_flight: 1
    build_logs_to_retain: 10
    plan:
    - do:
      - get: git_stack
        passed: [terraform-apply]
      - get: tfstate
        passed: [terraform-apply]
      - get: git_config
        passed: [terraform-apply]
      - task: merge-stack-and-config
        config:
          <<: *merge-stack-and-config
          inputs:
          - name: git_config
            path: "config"
          - name: git_stack
            path: "stack"
        params:
          CONFIG_PATH: ((project))/terraform/((env))
          STACK_PATH: stack-ec2/terraform
      - put: tfstate
        params:
          env_name: ((env))
          action: destroy
          terraform_source: merged-stack/
        get_params:
          action: destroy
